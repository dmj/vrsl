<xsl:transform version="2.0"
               exclude-result-prefixes="fn sh rdfs xs xsl"
               xmlns="http://relaxng.org/ns/structure/1.0"
               xpath-default-namespace="http://relaxng.org/ns/structure/1.0"
               xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0"
               xmlns:fn="tag:dmaus@dmaus.name,2019:VRSL"
               xmlns:sh="http://www.w3.org/ns/shacl#"
               xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"
               xmlns:rdfs="http://www.w3.org/2000/01/rdf-schema#"
               xmlns:xs="http://www.w3.org/2001/XMLSchema"
               xmlns:xsl="http://www.w3.org/1999/XSL/Transform">

  <xsl:output indent="yes"/>

  <xsl:key name="superclass" match="rdfs:Class[rdfs:subClassOf]" use="rdfs:subClassOf/@rdf:resource"/>

  <xsl:template match="rdf:RDF">
    <grammar datatypeLibrary="http://www.w3.org/2001/XMLSchema-datatypes" ns="https://dmaus.name/ns/vrsl#">
      <a:documentation>Autogenerated from the formal ontology</a:documentation>
      <start>
        <ref name="ValidationSummary"/>
      </start>
      <xsl:apply-templates/>
    </grammar>
  </xsl:template>

  <xsl:template match="rdfs:Class[key('superclass', @rdf:about)]">
    <define name="{substring-after(@rdf:about, '#')}">
      <choice>
        <xsl:for-each select="key('superclass', @rdf:about)">
          <ref name="{substring-after(@rdf:about, '#')}"/>
        </xsl:for-each>
      </choice>
    </define>
  </xsl:template>

  <xsl:template match="rdfs:Class[not(key('superclass', @rdf:about))]">
    <define name="{substring-after(@rdf:about, '#')}">
      <element name="{substring-after(@rdf:about, '#')}">
        <xsl:if test="sh:property/sh:PropertyShape">
          <interleave>
            <xsl:for-each select="sh:property/sh:PropertyShape">
              <xsl:variable name="reference" as="element(ref)">
                <ref name="{substring-after(sh:path/@rdf:resource, '#')}"/>
              </xsl:variable>
              <xsl:variable name="occurrence" as="xs:string?" select="fn:occurrence(.)"/>
              <xsl:choose>
                <xsl:when test="$occurrence">
                  <xsl:element name="{$occurrence}">
                    <xsl:sequence select="$reference"/>
                  </xsl:element>
                </xsl:when>
                <xsl:otherwise>
                  <xsl:sequence select="$reference"/>
                </xsl:otherwise>
              </xsl:choose>
            </xsl:for-each>
          </interleave>
        </xsl:if>
        <empty/>
      </element>
    </define>
  </xsl:template>

  <xsl:template match="rdfs:Property">
    <define name="{substring-after(@rdf:about, '#')}">
      <element name="{substring-after(@rdf:about, '#')}">
        <xsl:choose>
          <xsl:when test="rdfs:range">
            <xsl:choose>
              <xsl:when test="starts-with(rdfs:range/@rdf:resource, 'http://www.w3.org/2001/XMLSchema#')">
                <attribute name="rdf:datatype">
                  <data type="anyURI"/>
                </attribute>
                <data type="{substring-after(rdfs:range/@rdf:resource, '#')}"/>
              </xsl:when>
              <xsl:when test="rdfs:range/@rdf:resource = 'http://www.w3.org/1999/02/22-rdf-syntax-ns#langString'">
                <optional>
                  <attribute name="xml:lang">
                    <data type="language"/>
                  </attribute>
                </optional>
                <text/>
              </xsl:when>
              <xsl:when test="starts-with(rdfs:range/@rdf:resource, '#')">
                <ref name="{substring-after(rdfs:range/@rdf:resource, '#')}"/>
              </xsl:when>
              <xsl:otherwise>
                <text/>
              </xsl:otherwise>
            </xsl:choose>
          </xsl:when>
          <xsl:otherwise>
            <text/>
          </xsl:otherwise>
        </xsl:choose>
      </element>
    </define>
  </xsl:template>

  <xsl:template match="text()"/>

  <xsl:function  name="fn:occurrence" as="xs:string?">
    <xsl:param name="property" as="element(sh:PropertyShape)"/>
    <xsl:variable name="minCount" select="if (exists($property/sh:minCount)) then $property/sh:minCount else 0"/>
    <xsl:variable name="maxCount" select="if (exists($property/sh:maxCount)) then $property/sh:maxCount else 2"/>
    <xsl:choose>
      <xsl:when test="$maxCount = 2 and $minCount = 0">zeroOrMore</xsl:when>
      <xsl:when test="$maxCount = 2 and $minCount = 1">oneOrMore</xsl:when>
      <xsl:when test="$maxCount = 1 and $minCount = 0">optional</xsl:when>
    </xsl:choose>
  </xsl:function>

</xsl:transform>
