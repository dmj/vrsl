<article xmlns="http://docbook.org/ns/docbook" version="5.0"
         xmlns:xi="http://www.w3.org/2001/XInclude" status="draft">
  <info>
    <title>Validation Report Summary Language (VRSL)</title>
    <subtitle>A language for summarizing validation reports</subtitle>
    <authorgroup>
      <author>
        <personname>David Maus</personname>
      </author>
    </authorgroup>
  </info>
  <section xml:id="introduction">
    <title>Introduction</title>
    <para>
      The idea of a unified language to express validation results grew out of the XProc.Next community group discussing
      the different validation steps. XProc 1.0 supports validation with XML Schema, RelaxNG, Schematron, and NVDL. With
      the advent of non-XML documents flowing through an XProc pipeline other validation technologies like JSON-Schema
      came into view. The Validation Report Summary Language (VRSL) addresses the need for a unified language for
      validation results by providing a vocabulary for <emphasis>summarizing</emphasis> validation reports, and a
      canonical serialization of such a validation report summary as XML.
    </para>
    <para>
      VRSL conceptualizes validation as process that evaluates whether a given document is valid with respect to set of
      rules, a schema. The validation process might create validation results with information about parts of the
      document that did or did not validate with respect to the rules of the schema. A validation result conveys a
      human-readable message and indiciates the part of the document and/or schema that caused validation to fail.
    </para>
    <figure>
      <title>A validation summary graph</title>
      <mediaobject>
        <imageobject>
          <imagedata fileref="figure-01.svg"/>
        </imageobject>
      </mediaobject>
    </figure>
  </section>
  <section xml:id="namespaces">
    <title>Namespaces</title>
    <table>
      <caption>Namespaces used in this document</caption>
      <tbody>
        <tr>
          <td>dct</td>
          <td>http://purl.org/dc/terms/</td>
          <td>Dublin Core Metadata Terms</td>
        </tr>
        <tr>
          <td>rdf</td>
          <td>http://www.w3.org/1999/02/22-rdf-syntax-ns#</td>
          <td>Resource Description Framework</td>
        </tr>
        <tr>
          <td>vrsl</td>
          <td>https://dmaus.name/ns/vrsl#</td>
          <td>Validation Report Summary Language</td>
        </tr>
        <tr>
          <td>sh</td>
          <td>http://www.w3.org/ns/shacl#</td>
          <td>Shape Constraint Language</td>
        </tr>
        <tr>
          <td>xsd</td>
          <td>http://www.w3.org/2001/XMLSchema#</td>
          <td>XML Schema</td>
        </tr>
      </tbody>
    </table>
  </section>
  <section xml:id="ontology">
    <title>Ontology</title>
    <para>
      This is a placeholder whose content is replaced by a DocBook section created from the formal ontology
      specification.
    </para>
  </section>
  <section xml:id="serialization">
    <title>Serializations</title>
    <section>
      <title>XML Serialization</title>
      <para>
        The graph is serialized as striped RDF/XML centered on the ValidationSummary node. In a striped syntax a set of triples is
        represented as sequence of XML elements corresponding to the subject containing child XML elements corresponding to
        predicates the content or attributes of which correspond to the objects.
      </para>
      <para> The rules for serializing a ValidationSummary as XML are as follows: </para>
      <itemizedlist>
        <listitem>
          <para> The serialization starts with the ValidationSummary node as subject. </para>
        </listitem>
        <listitem>
          <para>
            <emphasis>Subject rule:</emphasis> Create an element whose name is derived from the
            URI reference which gives the type of the subject, following the URI-QName mapping
            convention described in section 2.1 of the RDF/XML specification <biblioref linkend="rdfxml"/>.
          </para>
        </listitem>
        <listitem>
          <para>
            <emphasis>Predicate rule:</emphasis> For each predicate create an element whose name is derived from the URI
            reference which forms the predicate, following the URI-QName mapping convention described in section 2.1 of
            the RDF/XML specification <biblioref linkend="rdfxml"/>. </para>
        </listitem>
        <listitem>
          <para>
            <emphasis>Object rule:</emphasis>
          </para>
          <itemizedlist>
            <listitem>
              <para> If the object of the triple is a URI reference, add an attribute with the
              QName rdf:resource and make the value of this attribute a URI reference
              corresponding to the object. In this case, the property element is empty.
              </para>
            </listitem>
            <listitem>
              <para> If the object of the triple is an instance of a class, apply the Subject
              rule. </para>
            </listitem>
            <listitem>
              <para> If the object of the triple is a literal</para>
              <itemizedlist>
                <listitem>
                  <para> For a plain literal, make the lexical form the content of the
                  property element. If a language tag is present, add an attribute with
                  the QName <tag class="attribute">xml:lang</tag> and make the value of
                  this attribute the language tag. </para>
                </listitem>
                <listitem>
                  <para> For a typed literal, make the lexical form the content of the
                  property element, and add an attribute with the QName <tag
                  class="attribute">rdf:datatype</tag> and make the value of this
                  attribute a URI reference corresponding to the URI of the datatype.
                  </para>
                </listitem>
                <listitem>
                  <para> For an XML literal i.e. a typed literal with the datatype
                  <uri>http://www.w3.org/1999/02/22-rdf-syntax-ns#XMLLiteral</uri>, make
                  the lexical form the content of the property element, and add an
                  attribute with the QName <tag class="attribute">rdf:parseType</tag> and
                  make the value of this attribute the string <tag class="attvalue"
                  >Literal</tag>.  </para>
                </listitem>
              </itemizedlist>
            </listitem>
          </itemizedlist>
        </listitem>
      </itemizedlist>
    </section>
    <section>
      <title>JSON Serialization</title>
      <para> The graph is serialized as compacted JSON-LD <biblioref linkend="jsonld"/> centered on the ValidationSummary node using the context given
      in the appendix. </para>
    </section>
  </section>
  <bibliography>
    <title>Bibliography</title>
    <bibliolist>
      <biblioentry xml:id="jsonld">
        <abbrev>JSON-LD</abbrev>
        <bibliomisc>
          Longley, Dave, Gregg Kellogg, Markus Lanthaler, and Manu Sporny. 2014. “JSON-LD 1.0 Processing Algorithms and
          API.” W3C Recommendation. W3C. http://www.w3.org/TR/2014/REC-json-ld-api-20140116/.
        </bibliomisc>
      </biblioentry>
      <biblioentry xml:id="rdfxml">
        <abbrev>RDF/XML</abbrev>
        <bibliomisc>
          Gandon, Fabien, and Guus Schreiber. 2014. “RDF 1.1 XML Syntax.” W3C Recommendation. World Wide Web
          Consortium. http://www.w3.org/TR/2014/REC-rdf-syntax-grammar-20140225/.
        </bibliomisc>
      </biblioentry>
    </bibliolist>
  </bibliography>
  <appendix>
    <title>Appendix</title>
    <section>
      <title>Formal Ontology</title>
      <programlisting language="xml"><xi:include href="specification.rdf" parse="text"/></programlisting>
    </section>
    <section>
      <title>RelaxNG grammar for XML serialization</title>
      <para>
        The following RelaxNG grammar can be used to validate the XML serialization.
      </para>
      <programlisting language="rnc"><xi:include href="vrsl.rnc" parse="text"/></programlisting>
    </section>
    <section xml:id="jsonld-context">
      <title>JSON-LD context</title>
      <programlisting language="json">{ "@vocab": "https://dmaus.name/ns/vrsl#" }</programlisting>
    </section>
    <section>
      <title>Examples</title>
      <section>
        <title>Schematron validation</title>
        <example>
          <title>SVRL Report</title>
          <programlisting language="xml"><xi:include href="example/schematron.svrl" parse="text"/></programlisting>
        </example>
        <example>
          <title>Validation summary in Turtle</title>
          <programlisting language="turtle"><xi:include href="example/schematron.ttl" parse="text"/></programlisting>
        </example>
        <example>
          <title>Validation summary in XML</title>
          <programlisting language="xml"><xi:include href="example/schematron.rdf" parse="text"/></programlisting>
        </example>
      </section>
      <section>
        <title>SHACL validation</title>
        <example>
          <title>Validation report</title>
          <programlisting language="turtle"><xi:include href="example/shacl.report" parse="text"/></programlisting>
        </example>
        <example>
          <title>Validation summary in Turtle</title>
          <programlisting language="turtle"><xi:include href="example/shacl.ttl" parse="text"/></programlisting>
        </example>
        <example>
          <title>Validation summary in XML</title>
          <programlisting language="xml"><xi:include href="example/shacl.rdf" parse="text"/></programlisting>
        </example>
      </section>
    </section>
  </appendix>
</article>
